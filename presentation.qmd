---
format: 
  revealjs:
    footer: "[github.com/fleverest/prefio-demo-WOMBAT-2025](https://github.com/fleverest/prefio-demo-WOMBAT-2025/)"
    theme: []
    slide-number: c/t
    incremental: true
editor: visual
---

::::: columns
::: column
<br> <br>

<h1>`prefio`</h1>
:::

::: column
![](https://github.com/fleverest/prefio/raw/refs/heads/main/man/figures/prefio.svg){width="300"}
:::
:::::

<br> <br>

<h2>Working with preferential data in R</h2>

<hr>

<p>Floyd Everest, Heather Turner and Damjan Vukcevic</p>

```{r setup}
#| include: false
library(prefio)
library(tidyverse)
set.seed(2025-9-30)
```

## What is preferential data?

::::: columns
::: {.column width="30%"}
[![A sample HoR ballot, courtesy of the AEC](./hor-paper.jpg){fig-alt="A sample ballot for ranking Australian house of representatives candidates." width="80%"}](https://www.aec.gov.au/voting/how_to_vote/voting_hor.htm)
:::

::: {.column width="70%"}
-   One entry = a *ranking* among a common set of *items*.

-   e.g., ballots for the house of reps!

-   "computational social choice, recommender systems, data mining, machine learning, combinatorial optimization, to name just a few" --- [PrefLib](https://preflib.github.io/PrefLib-Jekyll/)

-   Other kinds of preferences can be incomplete or even include ties
:::
:::::

## What does tabular preferential data look like?

Wangaratta: (Charles, Beatriz, Allie), Geelong: (Allie, Beatriz)

. . . 

::::: columns
::: column
```{r echo = FALSE, results = 'asis'}
long <- tribble(
  ~ID, ~VoterLocation, ~Candidate, ~Rank,
  2, "Wangaratta", "Allie", 3,
  2, "Wangaratta", "Beatriz", 2,
  2, "Wangaratta", "Charles", 1,
  3, "Geelong", "Allie", 2,
  3, "Geelong", "Beatriz", 1
)
knitr::kable(
  long,
  caption = "\"Lucky\" long format.",
  format = "html",
  table.attr = 'style="font-size: 0.7em; width: 70%;"'
)
```
:::

::: column
```{r echo = FALSE, results = 'asis'}
wide <- tribble(
  ~ID, ~VoterLocation, ~Allie, ~Beatriz, ~Charles,
  2, "Wangaratta", 3, 2, 1,
  3, "Geelong", 2, 1, NA
)
knitr::kable(
  wide,
  caption = "\"Unlucky\" wide format.",
  format = "html",
  table.attr = 'style="font-size: 0.7em; width: 70%;"'
)
```
:::
:::::

## What does tabular preferential data look like?

-   [Wide format data](./aec-senate-wide-data.csv) from the most recent Federal election (2025 Senators for ACT)

-   [Long format data](./nsw_aec_long_data.tsv) from the most recent NSW legislative assembly election (2023 member for Albury)

## Let's collect some votes!

Rank these cafÃ© orders from most to least preferred

::::: columns
::: column
-   Latte
-   Iced latte
-   Flat white
-   Black coffee
-   Cold brew
-   Matcha
-   Tea (coffee has too much caffeine)
:::

::: column
{{< qrcode https://vote.floydeverest.com width=300 height=300 >}} [vote.floydeverest.com](https://vote.floydeverest.com/)
:::
:::::

## The history of `prefio`

::::: columns
:::{.column width="60%"}
-   I wanted to make NSW elections accessible
-   Integrating with the [PrefLib](https://preflib.github.io/PrefLib-Jekyll/) database
-   "stole" Heather's code from `PlackettLuce` for loading PrefLib data and handling preferences
-   Adapted it to mesh nicely with the tidyverse ecosystem
:::
:::{.column width="40%"}
{{< qrcode https://vote.floydeverest.com width=200 height=200 >}} [vote.floydeverest.com](https://vote.floydeverest.com/)
:::
:::::


## A "quick" demo

Let's take a quick look at the [2023 New South Wales legislative assembly election](https://pastvtr.elections.nsw.gov.au/sg2301/la/results).

. . .

```{r echo=TRUE}
list.files("nswla_data/")
```

## A "quick" demo

```{r echo=TRUE}
# Load the entire election with readr + purrr
election <- list.files("nswla_data/", pattern = "\\.zip$", full.names = TRUE) |>
  map(function(x) {
    read_delim(x,
               delim = "\t",
               show_col_types = FALSE,
               col_select = c(District, BPNumber, CandidateName, PrefCounted))
  }) |>
  list_rbind() |>
  print(n = 4)
```

## A "quick" demo

```{r echo=TRUE}
# Format the preferences with prefio
election <- election |>
  long_preferences(vote,
                   id_cols = c(District, BPNumber),
                   item_col = CandidateName,
                   rank_col = PrefCounted) |>
  print(n = 5)
```


## A "quick" demo

```{r echo=TRUE}
election |>
  group_by(vote) |>
  summarise(frequency = n()) |>
  sample_n(5) |>
  knitr::kable(
    format = "html",
    table.attr = 'style="font-size: 0.6em; width: 80%;"'
  )
```

## A "quick" demo

Compare our computed results with [the official results](https://pastvtr.elections.nsw.gov.au/SG2301/LA/state/elected) (much faster than I would have previously thought possible).

```{r echo=TRUE}
# Format the preferences with prefio
election |>
  summarise(
    Winner = pref_irv(vote)$winner,
    .by = District
  )
```

## Where to next?

-   I'd like to integrate this back into `PlackettLuce`, where it was born.

-   It would be great to directly produce visualisations for preferences in the future.

-   There are likely many features needed to make this useful to people other than me.

-   If you work with preferential data, give it a go and let me know of any features which may be useful to add!

# The results

## Democratically confirmed best coffee order

```{r echo=TRUE}
votes <- read_csv("voter_app/data/responses.csv") |>
  long_preferences(vote,
                   id_cols = c(device_hash, timestamp),
                   rank_col = rank,
                   item_col = item) |>
  pull(vote)

pref_irv(votes)$winner
```


## Distribution of preferences

```{r echo = FALSE}
library(kableExtra)
pref_irv(votes)$rounds |>
  reduce(left_join, by = "candidate") |>
  rename_with(~ c("Candidate", paste("Round", 1:(length(.) - 1)))) |>
  mutate(across(everything(), ~replace_na(as.character(.), ""))) |>
  kbl(format.args = list(na.encode = TRUE)) |>
  kable_styling(font_size = 30)
```


# ðŸŽ‰ Thanks for listening!